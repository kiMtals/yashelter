import random
from flask import Flask, request, jsonify, Response
import psycopg2
import time
from datetime import datetime
from prometheus_client import Counter, Histogram, generate_latest, CONTENT_TYPE_LATEST
from flasgger import Swagger
from flask import render_template_string

app = Flask(__name__)
app.config["SWAGGER"] = {
    "title": "Shelter API",
    "uiversion": 3,
    "specs_route": "/apidocs"
}
swagger = Swagger(app)

REQUEST_COUNT = Counter('http_requests_total', 'Total HTTP Requests', ['method', 'endpoint'])
REQUEST_LATENCY = Histogram('http_request_duration_seconds', 'HTTP Request Latency', ['endpoint'])

def get_db():
    try:
        return psycopg2.connect(
            dbname="shelter_db",
            user="postgres",
            password="password",
            host="db"
        )
    except Exception as e:
        app.logger.error(f"Database connection error: {e}")
        raise

@app.route('/')
def home():
    base_url = request.host_url.rstrip('/')
    return render_template_string("""
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <title>–Ø–Ω–¥–µ–∫—Å.–ü—Ä–∏—é—Ç</title>
        <style>
            body { font-family: Arial, sans-serif; background: #f4f4f4; padding: 2em; color: #333; }
            h1 { color: #8A2BE2; }
            ul { list-style: none; padding-left: 0; }
            li { margin-bottom: 0.5em; }
            a { text-decoration: none; color: #007bff; }
            a:hover { text-decoration: underline; }
        </style>
    </head>
    <body>
        <h1>üê∂ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å.–ü—Ä–∏—é—Ç!</h1>
        <p>–í—ã –º–æ–∂–µ—Ç–µ:</p>
        <ul>
            <li><a href="{{ base_url }}/docs">üìò –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è</a></li>
            <li><a href="{{ base_url }}/main">üêæ UI: –ñ–∏–≤–æ—Ç–Ω—ã–µ</a></li>
            <li><a href="{{ base_url }}/animals">üßæ JSON: –°–ø–∏—Å–æ–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö</a></li>
            <li><a href="{{ base_url }}/metrics">üìà –ú–µ—Ç—Ä–∏–∫–∏ Prometheus</a></li>
            <li><a href="{{ base_url }}/apidocs">üß™ Swagger UI</a></li>
            <li><a href="{{ base_url.replace(':8000', ':9090') }}">üîé Prometheus</a></li>
            <li><a href="{{ base_url.replace(':8000', ':9093') }}">üö® Alertmanager</a></li>
            <li><a href="{{ base_url.replace(':8000', ':3000') }}">üìä Grafana</a></li>
            <li><a href="{{ base_url.replace(':8000', ':3006') }}">‚öôÔ∏è –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</a></li>
        </ul>
    </body>
    </html>
    """, base_url=base_url)


@app.route('/docs')
def docs():
    base_url = request.host_url.rstrip('/')
    return f"""
    <h1>üìò –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API</h1>
    <ul>
        <li><b>GET</b> <a href="{base_url}/">/</a> ‚Äî –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</li>
        <li><b>GET</b> <a href="{base_url}/animals">/animals</a> ‚Äî –°–ø–∏—Å–æ–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö</li>
        <li><b>POST</b> <code>/api/animals</code> ‚Äî –î–æ–±–∞–≤–∏—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ</li>
        <li><b>GET</b> <a href="{base_url}/slow">/slow</a> ‚Äî –ú–µ–¥–ª–µ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç (–¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤)</li>
        <li><b>GET</b> <a href="{base_url}/metrics">/metrics</a> ‚Äî –ú–µ—Ç—Ä–∏–∫–∏ Prometheus</li>
        <li><b>UI</b> <a href="{base_url}/apidocs">Swagger UI</a> ‚Äî –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è</li>
    </ul>
    <hr>
    <h3>üîó –°—Å—ã–ª–∫–∏ –Ω–∞ —Å–µ—Ä–≤–∏—Å—ã</h3>
    <ul>
        <li><a href="{base_url.replace(':8000', ':9090')}">Prometheus</a></li>
        <li><a href="{base_url.replace(':8000', ':9093')}">Alertmanager</a></li>
        <li><a href="{base_url.replace(':8000', ':3000')}">Grafana</a></li>
        <li><a href="{base_url.replace(':8000', ':3006')}">Load tester</a></li>
    </ul>
    """

@app.route('/animals', methods=['GET'])
def list_animals():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö
    ---
    tags:
      - Animals
    responses:
      200:
        description: –°–ø–∏—Å–æ–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö
        schema:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              name:
                type: string
              type:
                type: string
              age:
                type: integer
              arrival_date:
                type: string
              health:
                type: string
    """
    start_time = time.time()
    try:
        conn = get_db()
        cur = conn.cursor()
        cur.execute("SELECT * FROM animals;")
        animals = cur.fetchall()
        return jsonify([{
            'id': a[0],
            'name': a[1],
            'type': a[2],
            'age': a[3],
            'arrival_date': a[4].isoformat() if a[4] else None,
            'health': a[5]
        } for a in animals])
    except Exception as e:
        return jsonify({"error": str(e)}), 500
    finally:
        REQUEST_LATENCY.labels('/animals').observe(time.time() - start_time)
        if 'conn' in locals():
            conn.close()

@app.route('/api/animals', methods=['POST'])
def add_animal():
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ
    ---
    tags:
      - Animals
    parameters:
      - in: body
        name: animal
        required: true
        schema:
          type: object
          required:
            - name
            - type
            - age
            - health
          properties:
            name:
              type: string
            type:
              type: string
            age:
              type: integer
            health:
              type: string
    responses:
      201:
        description: –ñ–∏–≤–æ—Ç–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ
      400:
        description: –ù–µ–≤–µ—Ä–Ω—ã–π JSON
      500:
        description: –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    """
    app.logger.info(f"Received data: {request.json}")
    start_time = time.time()
    if not request.json:
        return jsonify({"error": "JSON data required"}), 400

    try:
        data = request.json
        conn = get_db()
        cur = conn.cursor()
        cur.execute(
            """INSERT INTO animals 
            (name, animal_type, age, health_status) 
            VALUES (%s, %s, %s, %s) RETURNING id""",
            (data.get('name'), data.get('type'), data.get('age'), data.get('health'))
        )
        conn.commit()
        return jsonify({"id": cur.fetchone()[0]}), 201
    except Exception as e:
        return jsonify({"error": str(e)}), 500
    finally:
        REQUEST_LATENCY.labels('/api/animals').observe(time.time() - start_time)
        if 'conn' in locals():
            conn.close()

@app.route('/slow')
def slow_endpoint():
    """–ú–µ–¥–ª–µ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∞ –∞–ª–µ—Ä—Ç–æ–≤
    ---
    tags:
      - Debug
    responses:
      200:
        description: –ú–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    """
    start_time = time.time()
    delay = random.uniform(0.7, 0.9)
    time.sleep(delay)
    REQUEST_LATENCY.labels('/slow').observe(time.time() - start_time)
    return jsonify({"status": "slow", "delay": delay})
@app.route('/main')
def main_ui():
    try:
        conn = get_db()
        cur = conn.cursor()
        cur.execute("SELECT * FROM animals;")
        animals = cur.fetchall()
    except Exception as e:
        return f"<h1>–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}</h1>"
    finally:
        if 'conn' in locals():
            conn.close()

    return render_template_string("""
    <!DOCTYPE html>
    <html>
    <head>
        <title>–ñ–∏–≤–æ—Ç–Ω—ã–µ</title>
        <style>
            body { font-family: sans-serif; padding: 2em; background: #f9f9f9; }
            h1 { color: #4b0082; }
            table { width: 100%; border-collapse: collapse; background: white; }
            th, td { padding: 10px; border: 1px solid #ccc; }
            th { background-color: #f0f0f0; }
            tr:nth-child(even) { background-color: #f9f9f9; }
        </style>
    </head>
    <body>
        <h1>üêæ –°–ø–∏—Å–æ–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö</h1>
        <table>
            <thead>
                <tr>
                    <th>ID</th><th>–ò–º—è</th><th>–¢–∏–ø</th><th>–í–æ–∑—Ä–∞—Å—Ç</th><th>–î–∞—Ç–∞</th><th>–ó–¥–æ—Ä–æ–≤—å–µ</th>
                </tr>
            </thead>
            <tbody>
            {% for a in animals %}
                <tr>
                    <td>{{ a[0] }}</td>
                    <td>{{ a[1] }}</td>
                    <td>{{ a[2] }}</td>
                    <td>{{ a[3] }}</td>
                    <td>{{ a[4].isoformat() if a[4] else '' }}</td>
                    <td>{{ a[5] }}</td>
                </tr>
            {% endfor %}
            </tbody>
        </table>
    </body>
    </html>
    """, animals=animals)

@app.route('/metrics')
def metrics():
    """–ú–µ—Ç—Ä–∏–∫–∏ Prometheus"""
    return Response(generate_latest(), mimetype=CONTENT_TYPE_LATEST)


@app.after_request
def track_metrics(response):
    REQUEST_COUNT.labels(request.method, request.path).inc()
    return response

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8000)
